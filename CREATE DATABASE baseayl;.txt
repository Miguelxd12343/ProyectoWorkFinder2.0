-- Crear base de datos
CREATE DATABASE IF NOT EXISTS baseayl;
USE baseayl;

-- Tabla de roles
CREATE TABLE rol (
    IdRol INT AUTO_INCREMENT PRIMARY KEY,
    NombreRol VARCHAR(50) NOT NULL
);

-- Tabla de empresas (relacionada por ahora, aunque no se está usando mucho)
CREATE TABLE empresaasociada (
    IdEmpresa INT AUTO_INCREMENT PRIMARY KEY,
    NombreEmpresa VARCHAR(100) NOT NULL,
    Direccion VARCHAR(255),
    Telefono VARCHAR(15)
);

-- Tabla de usuarios (empresa, candidato, admin)
CREATE TABLE usuario (
    IdUsuario INT AUTO_INCREMENT PRIMARY KEY,
    Nombre VARCHAR(100) NOT NULL,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Contrasena VARCHAR(255) NOT NULL,
    IdRol INT NOT NULL,
    DireccionEmpresa VARCHAR(255),             -- NUEVO
    IdentificacionFiscal VARCHAR(50),          -- NUEVO
    reset_token VARCHAR(255) DEFAULT NULL,     -- Recuperación de contraseña
    token_expiry DATETIME DEFAULT NULL,        -- Expiración del token
    FOREIGN KEY (IdRol) REFERENCES rol(IdRol) ON DELETE CASCADE
);


DELIMITER //

CREATE PROCEDURE RegistrarUsuario (
    IN p_Nombre VARCHAR(100),
    IN p_Email VARCHAR(100),
    IN p_Contrasena VARCHAR(255),
    IN p_IdRol INT,
    IN p_DireccionEmpresa VARCHAR(255),
    IN p_IdentificacionFiscal VARCHAR(50)
)
BEGIN
    IF p_IdRol = 1 THEN
        INSERT INTO usuario (Nombre, Email, Contrasena, IdRol, DireccionEmpresa, IdentificacionFiscal)
        VALUES (p_Nombre, p_Email, p_Contrasena, p_IdRol, p_DireccionEmpresa, p_IdentificacionFiscal);
    ELSE
        INSERT INTO usuario (Nombre, Email, Contrasena, IdRol)
        VALUES (p_Nombre, p_Email, p_Contrasena, p_IdRol);
    END IF;
END //

DELIMITER ;


DELIMITER //
CREATE PROCEDURE sp_LoginUsuario(IN p_email VARCHAR(100))
BEGIN
    SELECT IdUsuario, Contrasena, Nombre, IdRol
    FROM usuario
    WHERE Email = p_email;
END;
//
DELIMITER ;

-- Tabla de hojas de vida (para candidatos)
CREATE TABLE hojadevida (
    IdHojaDeVida INT AUTO_INCREMENT PRIMARY KEY,
    ExperienciaLaboral TEXT,
    Educacion TEXT,
    Habilidades TEXT,
    IdUsuario INT NOT NULL,
    FOREIGN KEY (IdUsuario) REFERENCES usuario(IdUsuario) ON DELETE CASCADE
);

-- Tabla de puestos de trabajo (ofertas creadas por empresas)
CREATE TABLE puestodetrabajo (
    IdPuesto INT AUTO_INCREMENT PRIMARY KEY,
    IdUsuario INT NOT NULL,
    Titulo VARCHAR(100) NOT NULL,
    Descripcion TEXT NOT NULL,
    Ubicacion VARCHAR(100),
    TipoContrato VARCHAR(50),
    FechaPublicacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Estado VARCHAR(50) DEFAULT 'Activa',     -- NUEVO: Estado por defecto
    FOREIGN KEY (IdUsuario) REFERENCES usuario(IdUsuario) ON DELETE CASCADE
);

-- Tabla de solicitudes de empleo (por candidatos)
CREATE TABLE solicitudempleo (
    IdSolicitud INT AUTO_INCREMENT PRIMARY KEY,
    FechaEnvio DATE NOT NULL,
    Estado VARCHAR(50) NOT NULL,
    IdUsuario INT NOT NULL,
    IdPuestoTrabajo INT NOT NULL,
    FOREIGN KEY (IdUsuario) REFERENCES usuario(IdUsuario) ON DELETE CASCADE,
    FOREIGN KEY (IdPuestoTrabajo) REFERENCES puestodetrabajo(IdPuesto) ON DELETE CASCADE
);

-- Tabla perfil de usuario

CREATE TABLE perfilusuario (
    IdPerfil INT AUTO_INCREMENT PRIMARY KEY,
    IdUsuario INT NOT NULL,
    Edad INT,
    Cedula VARCHAR(20),
    EstadoCivil VARCHAR(50),
    Telefono VARCHAR(20),
    Direccion VARCHAR(255),
    EmpleoDeseado VARCHAR(100),
    Descripcion TEXT,
    HojaDeVidaPath VARCHAR(255),
    FotoPerfilPath VARCHAR(255),
    FechaActualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (IdUsuario) REFERENCES usuario(IdUsuario) ON DELETE CASCADE
);
-- añadir campos de información a hoja de vida

ALTER TABLE hojadevida 
ADD COLUMN Edad INT NULL,
ADD COLUMN Cedula VARCHAR(20) NULL,
ADD COLUMN EstadoCivil VARCHAR(50) NULL,
ADD COLUMN Telefono VARCHAR(20) NULL,
ADD COLUMN Direccion VARCHAR(255) NULL,
ADD COLUMN PuestoDeseado VARCHAR(100) NULL,
ADD COLUMN Descripcion TEXT NULL,
ADD COLUMN ArchivoCV VARCHAR(255) NULL;


-- Insertar roles
INSERT INTO rol (NombreRol) VALUES ('Empresa'), ('Candidato'), ('Administrador');

INSERT INTO usuario (Nombre, Email, Contrasena, IdRol)
VALUES (
    'Administrador',
    'admin@admin.com',
    '$2y$10$UqUecbqNNH45fz5ktqmRM.cVkC61.OcA7b819Yv/OHxMFISDk7UiK',
    3
);


ALTER TABLE perfilusuario ADD CONSTRAINT unique_cedula UNIQUE (Cedula);

USE baseayl;

ALTER TABLE perfilusuario
MODIFY COLUMN Edad DATE;


-- invitaciones 
CREATE TABLE invitaciones (
    IdInvitacion INT AUTO_INCREMENT PRIMARY KEY,
    IdEmpresa INT NOT NULL,          -- Se refiere al usuario empresa
    IdCandidato INT NOT NULL,        -- Nuevo nombre para distinguir del anterior
    IdPuesto INT NOT NULL,
    FechaInvitacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Mensaje TEXT,
    FOREIGN KEY (IdEmpresa) REFERENCES usuario(IdUsuario) ON DELETE CASCADE,
    FOREIGN KEY (IdCandidato) REFERENCES usuario(IdUsuario) ON DELETE CASCADE,
    FOREIGN KEY (IdPuesto) REFERENCES puestodetrabajo(IdPuesto) ON DELETE CASCADE
);


-- Ofertas activas por empresa
DROP PROCEDURE IF EXISTS sp_get_ofertas_activas_empresa;
DELIMITER $$
CREATE PROCEDURE sp_get_ofertas_activas_empresa(IN p_empresaId INT)
BEGIN
    SELECT COUNT(*) 
    FROM puestodetrabajo 
    WHERE IdUsuario = p_empresaId
      AND Estado = 'Activa';
END$$
DELIMITER ;

-- Solicitudes recibidas por empresa
DROP PROCEDURE IF EXISTS sp_get_total_solicitudes_empresa;
DELIMITER $$
CREATE PROCEDURE sp_get_total_solicitudes_empresa(IN p_empresaId INT)
BEGIN
    SELECT COUNT(*) 
    FROM solicitudempleo s
    INNER JOIN puestodetrabajo p ON s.IdPuestoTrabajo = p.IdPuesto
    WHERE p.IdUsuario = p_empresaId;
END$$
DELIMITER ;

-- Invitaciones enviadas por empresa
DROP PROCEDURE IF EXISTS sp_get_invitaciones_empresa;
DELIMITER $$
CREATE PROCEDURE sp_get_invitaciones_empresa(IN p_empresaId INT)
BEGIN
    SELECT COUNT(*) 
    FROM invitaciones
    WHERE IdEmpresa = p_empresaId;
END$$
DELIMITER ;

-- Candidatos disponibles
DROP PROCEDURE IF EXISTS sp_get_candidatos_disponibles;
DELIMITER $$
CREATE PROCEDURE sp_get_candidatos_disponibles()
BEGIN
    SELECT COUNT(*) 
    FROM usuario u
    WHERE u.IdRol = 2; -- 2 = Candidato
END$$
DELIMITER ;
